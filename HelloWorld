public static async Task<JsonDocument> KeepOnlyKeysAsync(JsonDocument inputJson, List<string> keysToKeep)
{
    using (var stream = new MemoryStream())
    using (var writer = new Utf8JsonWriter(stream))
    {
        writer.WriteStartObject();

        foreach (var property in inputJson.RootElement.EnumerateObject())
        {
            if (keysToKeep.Contains(property.Name))
            {
                property.WriteTo(writer);
            }
        }

        writer.WriteEndObject();
        await writer.FlushAsync();
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}

public static async Task<JsonDocument> RemoveKeysAsync(JsonDocument inputJson, List<string> keysToRemove)
{
    using (var stream = new MemoryStream())
    using (var writer = new Utf8JsonWriter(stream))
    {
        writer.WriteStartObject();

        foreach (var property in inputJson.RootElement.EnumerateObject())
        {
            if (!keysToRemove.Contains(property.Name))
            {
                property.WriteTo(writer);
            }
        }

        writer.WriteEndObject();
        await writer.FlushAsync();
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}

public static async Task<JsonDocument> FilterJsonByValuesAsync(JsonDocument inputJson, Dictionary<string, List<string>> criteria)
{
    using (var stream = new MemoryStream())
    using (var writer = new Utf8JsonWriter(stream))
    {
        writer.WriteStartObject();

        foreach (var property in inputJson.RootElement.EnumerateObject())
        {
            if (criteria.TryGetValue(property.Name, out var values) && values.Contains(property.Value.GetString()))
            {
                property.WriteTo(writer);
            }
        }

        writer.WriteEndObject();
        await writer.FlushAsync();
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}

public static async Task<JsonDocument> MultiplyKeyByValueAsync(JsonDocument inputJson, string key, double multiplier)
{
    using (var stream = new MemoryStream())
    using (var writer = new Utf8JsonWriter(stream))
    {
        writer.WriteStartObject();

        foreach (var property in inputJson.RootElement.EnumerateObject())
        {
            if (property.Name.Equals(key, StringComparison.OrdinalIgnoreCase) && property.Value.TryGetDouble(out var number))
            {
                writer.WriteNumber(key, number * multiplier);
            }
            else
            {
                property.WriteTo(writer);
            }
        }

        writer.WriteEndObject();
        await writer.FlushAsync();
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}
