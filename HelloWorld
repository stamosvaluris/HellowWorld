using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;
using System.Dynamic;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static async Task<IEnumerable<dynamic>> FilterCsvAsync(Stream inputStream, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputStream);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<Dictionary<string, object>>().ToListAsync();
            var filteredRecords = records.Where(record =>
            {
                foreach (var criterion in criteria)
                {
                    if (!record.TryGetValue(criterion.Key, out var value) || value?.ToString() != criterion.Value)
                    {
                        return false;
                    }
                }
                return true;
            });

            return filteredRecords;
        }

        public static async Task WriteCsvAsync(Stream outputStream, IEnumerable<dynamic> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
            };

            using var writer = new StreamWriter(outputStream);
            using var csvWriter = new CsvWriter(writer, config);
            await csvWriter.WriteRecordsAsync(records);
        }

        public static async Task WriteCsvAsync(string outputFilePath, IEnumerable<dynamic> records)
        {
            using var stream = new FileStream(outputFilePath, FileMode.Create, FileAccess.Write);
            await WriteCsvAsync(stream, records);
        }

        public static async Task<IEnumerable<dynamic>> KeepOnlyColumnsAsync(Stream inputStream, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputStream);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<ExpandoObject>().ToListAsync();
            var filteredRecords = records.Select(record =>
            {
                var dictionary = (IDictionary<string, object>)record;
                var filteredDict = new ExpandoObject() as IDictionary<string, object>;
                foreach (var key in columnsToKeep)
                {
                    if (dictionary.ContainsKey(key))
                    {
                        filteredDict[key] = dictionary[key];
                    }
                }
                return filteredDict;
            });

            return filteredRecords;
        }

        public static async Task<IEnumerable<dynamic>> FilterByColumnValuesAsync(Stream inputStream, string columnName, List<string> values)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputStream);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<ExpandoObject>().ToListAsync();
            var filteredRecords = records.Where(record =>
            {
                var dictionary = (IDictionary<string, object>)record;
                return dictionary.ContainsKey(columnName) && values.Contains(dictionary[columnName]?.ToString());
            });

            return filteredRecords;
        }
    }
}
