using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public class CsvHelper
    {
        public void FilterCsv(string inputFilePath, string outputFilePath, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at field: {context.Field}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);

            var records = csvReader.GetRecords<dynamic>().ToList();
            Console.WriteLine($"Total records read: {records.Count}");

            var filteredRecords = new List<dynamic>();

            foreach (var record in records)
            {
                var recordDict = record as IDictionary<string, object>;
                if (recordDict == null) continue;

                Console.WriteLine("Record:");
                foreach (var kvp in recordDict)
                {
                    Console.WriteLine($"{kvp.Key}: {kvp.Value}");
                }

                bool recordMatches = criteria.All(criterion =>
                {
                    var key = criterion.Key;
                    var value = criterion.Value;
                    return recordDict.ContainsKey(key) && recordDict[key]?.ToString().Trim() == value;
                });

                if (recordMatches)
                {
                    filteredRecords.Add(record);
                }
            }

            Console.WriteLine($"Total records after filtering: {filteredRecords.Count}");

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);

            if (filteredRecords.Any())
            {
                csvWriter.WriteRecords(filteredRecords);
                Console.WriteLine("Filtered records written to output file.");
            }
            else
            {
                Console.WriteLine("No records matched the criteria.");
            }
        }
    }
}
