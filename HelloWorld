public static class JsonHelper
{
    public static async Task<JsonDocument> CombineJsonDocumentsAsync(JsonDocument jsonDoc1, JsonDocument jsonDoc2)
    {
        var combinedJsonArray = new List<JsonElement>();

        if (jsonDoc1.RootElement.ValueKind == JsonValueKind.Array)
        {
            combinedJsonArray.AddRange(jsonDoc1.RootElement.EnumerateArray());
        }
        else
        {
            combinedJsonArray.Add(jsonDoc1.RootElement);
        }

        if (jsonDoc2.RootElement.ValueKind == JsonValueKind.Array)
        {
            combinedJsonArray.AddRange(jsonDoc2.RootElement.EnumerateArray());
        }
        else
        {
            combinedJsonArray.Add(jsonDoc2.RootElement);
        }

        var combinedJsonString = JsonSerializer.Serialize(combinedJsonArray, new JsonSerializerOptions { WriteIndented = true });
        var combinedJsonDoc = JsonDocument.Parse(combinedJsonString);
        return await Task.FromResult(combinedJsonDoc);
    }

    public static async Task<Stream> CombineJsonDocumentsAsync(Stream jsonStream1, Stream jsonStream2)
    {
        var jsonDoc1 = await JsonDocument.ParseAsync(jsonStream1);
        var jsonDoc2 = await JsonDocument.ParseAsync(jsonStream2);

        var combinedJsonArray = new List<JsonElement>();

        if (jsonDoc1.RootElement.ValueKind == JsonValueKind.Array)
        {
            combinedJsonArray.AddRange(jsonDoc1.RootElement.EnumerateArray());
        }
        else
        {
            combinedJsonArray.Add(jsonDoc1.RootElement);
        }

        if (jsonDoc2.RootElement.ValueKind == JsonValueKind.Array)
        {
            combinedJsonArray.AddRange(jsonDoc2.RootElement.EnumerateArray());
        }
        else
        {
            combinedJsonArray.Add(jsonDoc2.RootElement);
        }

        var combinedJsonString = JsonSerializer.Serialize(combinedJsonArray, new JsonSerializerOptions { WriteIndented = true });
        var outputStream = new MemoryStream();
        var writer = new StreamWriter(outputStream);
        await writer.WriteAsync(combinedJsonString);
        await writer.FlushAsync();
        outputStream.Position = 0;

        return outputStream;
    }
}
