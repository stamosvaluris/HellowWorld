using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static async Task<IEnumerable<dynamic>> FilterCsvAsync(string inputFilePath, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            Console.WriteLine($"Total records read: {records.Count}");

            var filteredRecords = new List<dynamic>();

            foreach (var record in records)
            {
                var recordDict = record as IDictionary<string, object>;
                if (recordDict == null) continue;

                bool recordMatches = criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);
                if (recordMatches)
                {
                    filteredRecords.Add(record);
                }
            }

            return filteredRecords;
        }

        public static async Task WriteCsvAsync(string outputFilePath, IEnumerable<dynamic> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true
            };

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, config);

            var recordList = records.Select(record => new Dictionary<string, object>(record as IDictionary<string, object>)).ToList();
            await csvWriter.WriteRecordsAsync(recordList);
        }

        public static async Task<IEnumerable<dynamic>> FilterCsvAsync(Stream csvStream, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            var filteredRecords = new List<dynamic>();

            foreach (var record in records)
            {
                var recordDict = record as IDictionary<string, object>;
                if (recordDict == null) continue;

                bool recordMatches = criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);
                if (recordMatches)
                {
                    filteredRecords.Add(record);
                }
            }

            return filteredRecords;
        }

        public static async Task WriteCsvAsync(Stream outputStream, IEnumerable<dynamic> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true
            };

            using var writer = new StreamWriter(outputStream);
            using var csvWriter = new CsvWriter(writer, config);

            var recordList = records.Select(record => new Dictionary<string, object>(record as IDictionary<string, object>)).ToList();
            await csvWriter.WriteRecordsAsync(recordList);
        }

        public static async Task<IEnumerable<dynamic>> KeepOnlyColumnsAsync(string inputFilePath, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            var filteredRecords = records.Select(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                var filteredDict = recordDict.Where(kvp => columnsToKeep.Contains(kvp.Key))
                                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                return filteredDict;
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<dynamic>> RemoveColumnsAsync(string inputFilePath, List<string> columnsToRemove)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            var filteredRecords = records.Select(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                var filteredDict = recordDict.Where(kvp => !columnsToRemove.Contains(kvp.Key))
                                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                return filteredDict;
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<dynamic>> KeepOnlyColumnsAsync(Stream csvStream, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            var filteredRecords = records.Select(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                var filteredDict = recordDict.Where(kvp => columnsToKeep.Contains(kvp.Key))
                                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                return filteredDict;
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<dynamic>> RemoveColumnsAsync(Stream csvStream, List<string> columnsToRemove)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csvReader = new CsvReader(reader, config);

            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();
            var filteredRecords = records.Select(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                var filteredDict = recordDict.Where(kvp => !columnsToRemove.Contains(kvp.Key))
                                             .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                return filteredDict;
            }).ToList();

            return filteredRecords;
        }
    }
}
