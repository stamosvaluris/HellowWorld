public async Task<string> GetFilteredCounterpartyDataAsync(string token, string counterpartyName, string condition = null)
{
    var jsonString = await GetCounterpartyStaticDataAsync(token, counterpartyName);
    using var jsonDoc = JsonDocument.Parse(jsonString);
    var root = jsonDoc.RootElement;

    if (condition == null)
    {
        return jsonString;
    }

    var conditionParts = condition.Split(' ');
    if (conditionParts.Length != 3)
    {
        throw new ArgumentException("Invalid condition format. Use 'key operator value'.");
    }

    string key = conditionParts[0];
    string operatorSymbol = conditionParts[1];
    string value = conditionParts[2];

    var filteredElements = new Dictionary<string, JsonElement>();

    foreach (var property in root.EnumerateObject())
    {
        if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
        {
            var filteredElement = FilterElement(property.Value, key, operatorSymbol, value);
            if (filteredElement.ValueKind != JsonValueKind.Null)
            {
                filteredElements.Add(property.Name, filteredElement);
            }
        }
        else if (IsConditionMet(property.Value, key, operatorSymbol, value))
        {
            filteredElements.Add(property.Name, property.Value);
        }
    }

    using var stream = new MemoryStream();
    using (var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true }))
    {
        writer.WriteStartObject();
        foreach (var kvp in filteredElements)
        {
            writer.WritePropertyName(kvp.Key);
            kvp.Value.WriteTo(writer);
        }
        writer.WriteEndObject();
    }

    return Encoding.UTF8.GetString(stream.ToArray());
}

private JsonElement FilterElement(JsonElement element, string key, string operatorSymbol, string value)
{
    if (element.ValueKind == JsonValueKind.Object)
    {
        using var stream = new MemoryStream();
        using (var writer = new Utf8JsonWriter(stream))
        {
            writer.WriteStartObject();
            foreach (var property in element.EnumerateObject())
            {
                if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                {
                    var filteredElement = FilterElement(property.Value, key, operatorSymbol, value);
                    if (filteredElement.ValueKind != JsonValueKind.Null)
                    {
                        writer.WritePropertyName(property.Name);
                        filteredElement.WriteTo(writer);
                    }
                }
                else if (IsConditionMet(property.Value, key, operatorSymbol, value))
                {
                    writer.WritePropertyName(property.Name);
                    property.Value.WriteTo(writer);
                }
            }
            writer.WriteEndObject();
        }

        return JsonDocument.Parse(stream.ToArray()).RootElement.Clone();
    }
    else if (element.ValueKind == JsonValueKind.Array)
    {
        using var stream = new MemoryStream();
        using (var writer = new Utf8JsonWriter(stream))
        {
            writer.WriteStartArray();
            foreach (var item in element.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Object || item.ValueKind == JsonValueKind.Array)
                {
                    var filteredElement = FilterElement(item, key, operatorSymbol, value);
                    if (filteredElement.ValueKind != JsonValueKind.Null)
                    {
                        filteredElement.WriteTo(writer);
                    }
                }
                else if (IsConditionMet(item, key, operatorSymbol, value))
                {
                    item.WriteTo(writer);
                }
            }
            writer.WriteEndArray();
        }

        return JsonDocument.Parse(stream.ToArray()).RootElement.Clone();
    }

    return default;
}

private bool IsConditionMet(JsonElement element, string key, string operatorSymbol, string value)
{
    if (element.ValueKind == JsonValueKind.Object)
    {
        foreach (var property in element.EnumerateObject())
        {
            if (property.NameEquals(key))
            {
                return EvaluateCondition(property.Value.GetString(), operatorSymbol, value);
            }
            else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
            {
                if (IsConditionMet(property.Value, key, operatorSymbol, value))
                {
                    return true;
                }
            }
        }
    }
    else if (element.ValueKind == JsonValueKind.Array)
    {
        foreach (var item in element.EnumerateArray())
        {
            if (item.ValueKind == JsonValueKind.Object)
            {
                if (IsConditionMet(item, key, operatorSymbol, value))
                {
                    return true;
                }
            }
        }
    }

    return false;
}

private bool EvaluateCondition(string propertyValue, string operatorSymbol, string value)
{
    return operatorSymbol switch
    {
        "!=" => propertyValue != value,
        "=" => propertyValue == value,
        _ => throw new ArgumentException($"Unsupported operator '{operatorSymbol}'")
    };
}
