using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using CdsClient;
using CdsClient.Sftp;
using Helpers;
using FileOperations;

namespace CdsClient
{
    public static class Program
    {
        public static async Task Main(string[] args)
        {
            Configuration config = Configuration.Load();

            var fisConfig = FisClient.Services.FisClient(config.FisEnvironment);
            var accessToken = await fisConfig.GetAccessTokenAsync(config);
            var cpStaticDataService = new CpStaticDataService(fisConfig.BaseUrl, fisConfig.Services.CpStaticData.Endpoint);
            JsonDocument staticData = await cpStaticDataService.GetConditionalCounterpartyStaticDataAsync(accessToken, counterpartyName: null, config.CounterpartyCondition);
            var jsonHelper = new JsonHelper();
            var values = await jsonHelper.ExtractValuesByKeyAsync(staticData, config.KeyToExtract);
            foreach (var month in values)
            {
                Console.WriteLine(month);
            }

            SftpClient client = new SftpClient();
            client.Connect(config.Host, config.Port, config.Username, config.Password);
            client.ChangeDirectory(config.Files);
            client.GetLastUploadedZipFile(PathHelper.GetTempFolderPath());

            string tempPath = PathHelper.GetTempFolderPath();
            List<string> extractedFiles = ZipHelper.ExtractLastImportedZipFile(tempPath);

            string outputPathStream = Path.Combine(tempPath, "output_streamed.csv");
            using (var inputStream = new FileStream(extractedFiles[0], FileMode.Open, FileAccess.Read))
            using (var memoryStream = new MemoryStream())
            {
                var filteredColumnsStream = CsvHelper.KeepOnlyColumns(inputStream, config.ColumnsToKeep);
                CsvHelper.WriteCsv(memoryStream, filteredColumnsStream);
                memoryStream.Position = 0;

                var filteredRecordsStream = CsvHelper.FilterCsv(memoryStream, config.Criteria);
                using (var outputStream = new FileStream(outputPathStream, FileMode.Create, FileAccess.Write))
                {
                    CsvHelper.WriteCsv(outputStream, filteredRecordsStream);
                }
            }

            client.Disconnect();
        }
    }
}
