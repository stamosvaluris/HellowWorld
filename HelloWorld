using CsvHelper;
using CsvHelper.Configuration;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Dynamic;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static IEnumerable<ExpandoObject> KeepOnlyColumns(string inputFilePath, List<string> columnsToKeep)
        {
            using var reader = new StreamReader(inputFilePath);
            return KeepOnlyColumns(reader, columnsToKeep);
        }

        public static IEnumerable<ExpandoObject> KeepOnlyColumns(Stream csvStream, List<string> columnsToKeep)
        {
            using var reader = new StreamReader(csvStream, leaveOpen: true);
            return KeepOnlyColumns(reader, columnsToKeep);
        }

        private static IEnumerable<ExpandoObject> KeepOnlyColumns(TextReader reader, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                MissingFieldFound = null
            };

            using var csvReader = new CsvReader(reader, config);
            var records = csvReader.GetRecords<dynamic>().ToList();
            var filteredRecords = records.Select(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                var filteredDict = new ExpandoObject() as IDictionary<string, object>;

                foreach (var kvp in recordDict.Where(kvp => columnsToKeep.Contains(kvp.Key)))
                {
                    filteredDict[kvp.Key] = kvp.Value;
                }

                return (ExpandoObject)filteredDict;
            }).ToList();

            return filteredRecords;
        }

        public static IEnumerable<dynamic> FilterCsv(string inputFilePath, Dictionary<string, string> criteria)
        {
            using var reader = new StreamReader(inputFilePath);
            return FilterCsv(reader, criteria);
        }

        public static IEnumerable<dynamic> FilterCsv(Stream csvStream, Dictionary<string, string> criteria)
        {
            using var reader = new StreamReader(csvStream, leaveOpen: true);
            return FilterCsv(reader, criteria);
        }

        private static IEnumerable<dynamic> FilterCsv(TextReader reader, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                MissingFieldFound = null
            };

            using var csvReader = new CsvReader(reader, config);
            var records = csvReader.GetRecords<dynamic>().ToList();
            var filteredRecords = records.Where(record =>
            {
                var recordDict = record as IDictionary<string, object>;
                if (recordDict == null) return false;

                return criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);
            }).ToList();

            return filteredRecords;
        }

        public static void WriteCsv(string outputFilePath, IEnumerable<dynamic> records)
        {
            Directory.CreateDirectory(Path.GetDirectoryName(outputFilePath));

            using var writer = new StreamWriter(outputFilePath);
            WriteCsv(writer, records);
        }

        public static void WriteCsv(Stream outputStream, IEnumerable<dynamic> records)
        {
            using var writer = new StreamWriter(outputStream, leaveOpen: true);
            WriteCsv(writer, records);
        }

        private static void WriteCsv(TextWriter writer, IEnumerable<dynamic> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
            };

            using var csvWriter = new CsvWriter(writer, config);
            csvWriter.WriteRecords(records);
        }
    }
}
