using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;

namespace FileOperations
{
    public static class FileOperationsHelper
    {
        public static async Task MoveFilesAsync(string destinationFolder, params string[] filePaths)
        {
            var tasks = filePaths.Select(filePath => Task.Run(() =>
            {
                var fileName = Path.GetFileName(filePath);
                var destFilePath = Path.Combine(destinationFolder, fileName);
                File.Move(filePath, destFilePath);
            }));

            await Task.WhenAll(tasks);
        }

        public static async Task MoveFilesAsync(string destinationFolder, IEnumerable<string> filePaths)
        {
            var tasks = filePaths.Select(filePath => Task.Run(() =>
            {
                var fileName = Path.GetFileName(filePath);
                var destFilePath = Path.Combine(destinationFolder, fileName);
                File.Move(filePath, destFilePath);
            }));

            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFilesAsync(params string[] filePaths)
        {
            var tasks = filePaths.Select(filePath => Task.Run(() => File.Delete(filePath)));
            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFilesAsync(IEnumerable<string> filePaths)
        {
            var tasks = filePaths.Select(filePath => Task.Run(() => File.Delete(filePath)));
            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFoldersAsync(params string[] folderPaths)
        {
            var tasks = folderPaths.Select(folderPath => Task.Run(() => Directory.Delete(folderPath, true)));
            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFoldersAsync(IEnumerable<string> folderPaths)
        {
            var tasks = folderPaths.Select(folderPath => Task.Run(() => Directory.Delete(folderPath, true)));
            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFolderContentsAsync(params string[] folderPaths)
        {
            var tasks = folderPaths.Select(folderPath => Task.Run(() =>
            {
                var directoryInfo = new DirectoryInfo(folderPath);
                foreach (var file in directoryInfo.GetFiles())
                {
                    file.Delete();
                }
                foreach (var dir in directoryInfo.GetDirectories())
                {
                    dir.Delete(true);
                }
            }));

            await Task.WhenAll(tasks);
        }

        public static async Task DeleteFolderContentsAsync(IEnumerable<string> folderPaths)
        {
            var tasks = folderPaths.Select(folderPath => Task.Run(() =>
            {
                var directoryInfo = new DirectoryInfo(folderPath);
                foreach (var file in directoryInfo.GetFiles())
                {
                    file.Delete();
                }
                foreach (var dir in directoryInfo.GetDirectories())
                {
                    dir.Delete(true);
                }
            }));

            await Task.WhenAll(tasks);
        }

        public static async Task WriteFileAsync(string folderPath, string fileName, string content, string fileType)
        {
            var filePath = Path.Combine(folderPath, $"{fileName}.{fileType}");
            using (var writer = new StreamWriter(filePath))
            {
                await writer.WriteAsync(content);
            }
        }
    }
}
