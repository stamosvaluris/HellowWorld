using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

public static class JsonHelper
{
    public static async Task<JsonDocument> ReplaceKeysAsync(JsonDocument inputJson, Dictionary<string, string> replacements)
    {
        var rootElement = inputJson.RootElement;
        var modifiedJson = ReplaceKeysInJsonElement(rootElement, replacements);
        
        var modifiedJsonString = JsonSerializer.Serialize(modifiedJson);
        return JsonDocument.Parse(modifiedJsonString);
    }

    public static async Task<MemoryStream> ReplaceKeysAsync(MemoryStream inputStream, Dictionary<string, string> replacements)
    {
        inputStream.Position = 0;
        var inputJson = await JsonDocument.ParseAsync(inputStream);
        var modifiedJsonDoc = await ReplaceKeysAsync(inputJson, replacements);

        var modifiedStream = new MemoryStream();
        await JsonSerializer.SerializeAsync(modifiedStream, modifiedJsonDoc);
        modifiedStream.Position = 0;

        return modifiedStream;
    }

    private static JsonElement ReplaceKeysInJsonElement(JsonElement element, Dictionary<string, string> replacements)
    {
        switch (element.ValueKind)
        {
            case JsonValueKind.Object:
                var modifiedObject = new Dictionary<string, JsonElement>();
                foreach (var property in element.EnumerateObject())
                {
                    var newKey = replacements.ContainsKey(property.Name) ? replacements[property.Name] : property.Name;
                    modifiedObject[newKey] = ReplaceKeysInJsonElement(property.Value, replacements);
                }
                return JsonDocument.Parse(JsonSerializer.Serialize(modifiedObject)).RootElement;

            case JsonValueKind.Array:
                var modifiedArray = new List<JsonElement>();
                foreach (var item in element.EnumerateArray())
                {
                    modifiedArray.Add(ReplaceKeysInJsonElement(item, replacements));
                }
                return JsonDocument.Parse(JsonSerializer.Serialize(modifiedArray)).RootElement;

            default:
                return element;
        }
    }
}
