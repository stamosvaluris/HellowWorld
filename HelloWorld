using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FIS_Client.Services
{
    public class CpStaticDataService
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private readonly string _endpoint;

        public CpStaticDataService(HttpClient httpClient, string baseUrl, string endpoint)
        {
            _httpClient = httpClient;
            _baseUrl = baseUrl;
            _endpoint = endpoint;
        }

        public async Task<JsonDocument> GetCounterpartyStaticDataAsync(string token, string counterpartyName)
        {
            var url = string.IsNullOrWhiteSpace(counterpartyName) ? $"{_baseUrl}/{_endpoint}" : $"{_baseUrl}/{_endpoint}/{counterpartyName}";
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonDocument.Parse(jsonString);
        }

        public async Task<string> GetFilteredCounterpartyDataAsync(string token, string counterpartyName, string condition = null)
        {
            using var jsonDoc = await GetCounterpartyStaticDataAsync(token, counterpartyName);
            var root = jsonDoc.RootElement;

            if (condition == null)
            {
                return JsonElementToString(root);
            }

            var conditionParts = condition.Split(' ');
            if (conditionParts.Length != 3)
            {
                throw new ArgumentException("Invalid condition format. Use 'key operator value'.");
            }

            string key = conditionParts[0];
            string operatorSymbol = conditionParts[1];
            string value = conditionParts[2];

            var filteredElements = new List<JsonElement>();

            if (root.ValueKind == JsonValueKind.Array)
            {
                foreach (var element in root.EnumerateArray())
                {
                    if (IsConditionMet(element, key, operatorSymbol, value))
                    {
                        filteredElements.Add(element);
                    }
                }
            }
            else if (root.ValueKind == JsonValueKind.Object && IsConditionMet(root, key, operatorSymbol, value))
            {
                filteredElements.Add(root);
            }

            using var stream = new MemoryStream();
            using (var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true }))
            {
                if (filteredElements.Count == 1)
                {
                    filteredElements[0].WriteTo(writer);
                }
                else
                {
                    writer.WriteStartArray();
                    foreach (var element in filteredElements)
                    {
                        element.WriteTo(writer);
                    }
                    writer.WriteEndArray();
                }
            }

            return Encoding.UTF8.GetString(stream.ToArray());
        }

        private bool IsConditionMet(JsonElement element, string key, string operatorSymbol, string value)
        {
            if (element.ValueKind == JsonValueKind.Object)
            {
                foreach (var property in element.EnumerateObject())
                {
                    if (property.NameEquals(key))
                    {
                        return EvaluateCondition(property.Value.GetString(), operatorSymbol, value);
                    }
                    else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                    {
                        if (IsConditionMet(property.Value, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }
            else if (element.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in element.EnumerateArray())
                {
                    if (item.ValueKind == JsonValueKind.Object)
                    {
                        if (IsConditionMet(item, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        private bool EvaluateCondition(string propertyValue, string operatorSymbol, string value)
        {
            return operatorSymbol switch
            {
                "!=" => propertyValue != value,
                "=" => propertyValue == value,
                _ => throw new ArgumentException($"Unsupported operator '{operatorSymbol}'")
            };
        }

        private string JsonElementToString(JsonElement element)
        {
            using var stream = new MemoryStream();
            using (var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true }))
            {
                element.WriteTo(writer);
            }
            return Encoding.UTF8.GetString(stream.ToArray());
        }

        public string PrintJson(JsonElement element)
        {
            return JsonElementToString(element);
        }
    }
}
