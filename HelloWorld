public static async Task<JsonDocument> MultiplyKeyByValueAsync(JsonDocument inputJson, string key, double multiplier)
{
    using var stream = new MemoryStream();
    using var writer = new Utf8JsonWriter(stream);

    void WriteProperty(Utf8JsonWriter writer, JsonProperty property)
    {
        writer.WritePropertyName(property.Name);
        if (property.Name == key)
        {
            if (property.Value.ValueKind == JsonValueKind.Number)
            {
                writer.WriteNumberValue(property.Value.GetDouble() * multiplier);
            }
            else if (property.Value.ValueKind == JsonValueKind.String && double.TryParse(property.Value.GetString(), out double value))
            {
                writer.WriteNumberValue(value * multiplier);
            }
            else
            {
                property.Value.WriteTo(writer);
            }
        }
        else
        {
            property.Value.WriteTo(writer);
        }
    }

    if (inputJson.RootElement.ValueKind == JsonValueKind.Object)
    {
        writer.WriteStartObject();
        foreach (var property in inputJson.RootElement.EnumerateObject())
        {
            WriteProperty(writer, property);
        }
        writer.WriteEndObject();
    }
    else if (inputJson.RootElement.ValueKind == JsonValueKind.Array)
    {
        writer.WriteStartArray();
        foreach (var element in inputJson.RootElement.EnumerateArray())
        {
            if (element.ValueKind == JsonValueKind.Object)
            {
                writer.WriteStartObject();
                foreach (var property in element.EnumerateObject())
                {
                    WriteProperty(writer, property);
                }
                writer.WriteEndObject();
            }
            else
            {
                element.WriteTo(writer);
            }
        }
        writer.WriteEndArray();
    }

    await writer.FlushAsync();
    stream.Position = 0;
    return await JsonDocument.ParseAsync(stream);
}
