using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

public static class JsonHelper
{
    public static async Task<JsonDocument> CombineJsonDocumentsAsync(JsonDocument doc1, JsonDocument doc2)
    {
        var combinedArray = new List<JsonElement>();

        using (var doc1Array = doc1.RootElement.EnumerateArray())
        using (var doc2Array = doc2.RootElement.EnumerateArray())
        {
            while (doc1Array.MoveNext() && doc2Array.MoveNext())
            {
                var combinedObject = new Dictionary<string, JsonElement>();

                foreach (var property in doc1Array.Current.EnumerateObject())
                {
                    combinedObject[property.Name] = property.Value;
                }

                foreach (var property in doc2Array.Current.EnumerateObject())
                {
                    combinedObject[property.Name] = property.Value;
                }

                var combinedJsonObject = JsonDocument.Parse(JsonSerializer.Serialize(combinedObject)).RootElement;
                combinedArray.Add(combinedJsonObject);
            }
        }

        var combinedJsonString = JsonSerializer.Serialize(combinedArray);
        return JsonDocument.Parse(combinedJsonString);
    }

    public static async Task<MemoryStream> CombineJsonStreamsAsync(MemoryStream stream1, MemoryStream stream2)
    {
        stream1.Position = 0;
        stream2.Position = 0;

        var doc1 = await JsonDocument.ParseAsync(stream1);
        var doc2 = await JsonDocument.ParseAsync(stream2);

        var combinedDoc = await CombineJsonDocumentsAsync(doc1, doc2);

        var combinedStream = new MemoryStream();
        await JsonSerializer.SerializeAsync(combinedStream, combinedDoc);
        combinedStream.Position = 0;

        return combinedStream;
    }
}
