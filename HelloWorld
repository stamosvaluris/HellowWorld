public static async Task<Stream> CombineJsonDocumentsAsync(Stream jsonStream1, Stream jsonStream2)
{
    jsonStream1.Position = 0;
    jsonStream2.Position = 0;

    using var doc1 = await JsonDocument.ParseAsync(jsonStream1);
    using var doc2 = await JsonDocument.ParseAsync(jsonStream2);

    var combinedArray = new List<JsonElement>();

    void AddElements(JsonDocument doc)
    {
        if (doc.RootElement.ValueKind == JsonValueKind.Array)
        {
            foreach (var element in doc.RootElement.EnumerateArray())
            {
                combinedArray.Add(element);
            }
        }
        else
        {
            combinedArray.Add(doc.RootElement);
        }
    }

    AddElements(doc1);
    AddElements(doc2);

    var combinedJson = new MemoryStream();
    await JsonSerializer.SerializeAsync(combinedJson, combinedArray);
    combinedJson.Position = 0;

    return combinedJson;
}

public static async Task<JsonDocument> CombineJsonDocumentsAsync(JsonDocument jsonDoc1, JsonDocument jsonDoc2)
{
    var combinedArray = new List<JsonElement>();

    void AddElements(JsonDocument doc)
    {
        if (doc.RootElement.ValueKind == JsonValueKind.Array)
        {
            foreach (var element in doc.RootElement.EnumerateArray())
            {
                combinedArray.Add(element);
            }
        }
        else
        {
            combinedArray.Add(doc.RootElement);
        }
    }

    AddElements(jsonDoc1);
    AddElements(jsonDoc2);

    var combinedJson = new MemoryStream();
    await JsonSerializer.SerializeAsync(combinedJson, combinedArray);
    combinedJson.Position = 0;

    return await JsonDocument.ParseAsync(combinedJson);
}
