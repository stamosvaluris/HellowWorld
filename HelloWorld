using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        string filePath = "credentials.json";
        string encryptedFilePath = "encrypted_credentials.json";
        string keyPath = "secret.key";

        // Generate a key and save it
        using (Aes aes = Aes.Create())
        {
            aes.GenerateKey();
            File.WriteAllBytes(keyPath, aes.Key);

            // Encrypt the file
            byte[] encrypted = EncryptFile(filePath, aes.Key);
            File.WriteAllBytes(encryptedFilePath, encrypted);
        }
    }

    static byte[] EncryptFile(string filePath, byte[] key)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.GenerateIV();
            byte[] iv = aes.IV;
            byte[] encrypted;

            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (MemoryStream ms = new MemoryStream())
            {
                ms.Write(iv, 0, iv.Length);
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    fs.CopyTo(cs);
                }
                encrypted = ms.ToArray();
            }

            return encrypted;
        }
    }
}



 using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        string encryptedFilePath = "encrypted_credentials.json";
        string decryptedFilePath = "decrypted_credentials.json";
        string keyPath = "secret.key";

        byte[] key = File.ReadAllBytes(keyPath);

        // Decrypt the file
        byte[] decrypted = DecryptFile(encryptedFilePath, key);
        File.WriteAllBytes(decryptedFilePath, decrypted);
    }

    static byte[] DecryptFile(string encryptedFilePath, byte[] key)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            byte[] iv = new byte[aes.BlockSize / 8];
            byte[] decrypted;

            using (FileStream fs = new FileStream(encryptedFilePath, FileMode.Open, FileAccess.Read))
            {
                fs.Read(iv, 0, iv.Length);

                using (MemoryStream ms = new MemoryStream())
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(aes.Key, iv), CryptoStreamMode.Write))
                {
                    fs.CopyTo(cs);
                    cs.FlushFinalBlock();
                    decrypted = ms.ToArray();
                }
            }

            return decrypted;
        }
    }
}


let
    Source = Json.Document(File.Contents("path\to\decrypted_credentials.json"))
in
    Source
