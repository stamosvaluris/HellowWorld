using CdsClient.Sftp;
using Helpers;
using FileOperations;
using System.IO;
using System.Threading.Tasks;
using System.Collections.Generic;

public static class Program
{
    private static async Task Main(string[] args)
    {
        Configuration config = Configuration.Load();
        SftpClient client = new SftpClient();
        client.Connect(config.Host, config.Port, config.Username, config.Password);
        client.ChangeDirectory(config.File);

        PathHelper.GetTempFolderPath();
        client.GetLastUploadedZipFile(PathHelper.GetTempFolderPath());
        List<string> extractedFiles = ZipHelper.ExtractedLastImportedZipFile(PathHelper.GetTempFolderPath());

        var keepOnly = new List<string> { "Tier", "PrimaryCurve", "PrimaryCoupon", "Tenor", "ParSpread" };
        string outputDir = "t\\Temp\\output.csv";

        using (var memoryStream = new MemoryStream())
        {
            // Open the first extracted file as a stream
            using (var fileStream = new FileStream(extractedFiles[0], FileMode.Open, FileAccess.Read))
            {
                // Apply the KeepOnlyColumnsAsync operation
                var filteredColumns = await CsvHelper.KeepOnlyColumnsAsync(fileStream, keepOnly);

                // Reset the position of the memoryStream before writing
                memoryStream.Position = 0;
                await CsvHelper.WriteCsvAsync(memoryStream, filteredColumns);
            }

            memoryStream.Position = 0; // Reset position before reading for filtering
            var criteria = new Dictionary<string, string>
            {
                { "Tier", "SNRFOR" },
                { "PrimaryCurve", "Y" },
                { "PrimaryCoupon", "Y" },
                { "Tenor", "5Y" }
            };

            memoryStream.Position = 0; // Reset position before reading for filtering
            var filteredRecords = await CsvHelper.FilterCsvAsync(memoryStream, criteria);

            // Open the output file as a stream for writing
            using (var fileStream = new FileStream(outputDir, FileMode.Create, FileAccess.Write))
            {
                await CsvHelper.WriteCsvAsync(fileStream, filteredRecords);
            }
        }

        client.Disconnect();
    }
}
