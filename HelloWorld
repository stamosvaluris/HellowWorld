using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net.Http;

namespace FIS_Client.Services
{
    public class CpStaticDataService
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private readonly string _endpoint;

        public CpStaticDataService(HttpClient httpClient, string baseUrl, string endpoint)
        {
            _httpClient = httpClient;
            _baseUrl = baseUrl;
            _endpoint = endpoint;
        }

        public async Task<string> GetCounterpartyStaticDataAsync(string token, string counterpartyName)
        {
            var url = $"{_baseUrl}{_endpoint}{counterpartyName}";
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }

        public async Task<string> GetCounterpartyStaticDataWithConditionAsync(string token, string counterpartyName, string condition)
        {
            var jsonString = await GetCounterpartyStaticDataAsync(token, counterpartyName);
            var jsonElement = JsonDocument.Parse(jsonString).RootElement;

            if (string.IsNullOrEmpty(condition))
            {
                return jsonString;
            }

            var filteredElements = new Dictionary<string, JsonElement>();
            var conditionParts = condition.Split(' ', 3);

            if (conditionParts.Length != 3)
            {
                throw new ArgumentException("Invalid key-value format. Use 'key operator value'");
            }

            var key = conditionParts[0];
            var operatorSymbol = conditionParts[1];
            var value = conditionParts[2];

            FilterJsonElements(jsonElement, key, operatorSymbol, value, filteredElements);

            using var stream = new MemoryStream();
            using (var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true }))
            {
                writer.WriteStartObject();
                foreach (var kvp in filteredElements)
                {
                    writer.WritePropertyName(kvp.Key);
                    kvp.Value.WriteTo(writer);
                }
                writer.WriteEndObject();
            }

            return Encoding.UTF8.GetString(stream.ToArray());
        }

        private void FilterJsonElements(JsonElement element, string key, string operatorSymbol, string value, Dictionary<string, JsonElement> filteredElements)
        {
            if (element.ValueKind == JsonValueKind.Object)
            {
                foreach (var property in element.EnumerateObject())
                {
                    if (property.NameEquals(key) && IsConditionMet(property.Value, operatorSymbol, value))
                    {
                        filteredElements[property.Name] = property.Value;
                    }
                    else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                    {
                        FilterJsonElements(property.Value, key, operatorSymbol, value, filteredElements);
                    }
                }
            }
            else if (element.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in element.EnumerateArray())
                {
                    if (item.ValueKind == JsonValueKind.Object)
                    {
                        FilterJsonElements(item, key, operatorSymbol, value, filteredElements);
                    }
                }
            }
        }

        private bool IsConditionMet(JsonElement element, string operatorSymbol, string value)
        {
            switch (element.ValueKind)
            {
                case JsonValueKind.String:
                    var elementValue = element.GetString();
                    return operatorSymbol switch
                    {
                        "==" => elementValue == value,
                        "!=" => elementValue != value,
                        _ => throw new ArgumentException($"Unsupported operator '{operatorSymbol}'")
                    };
                default:
                    throw new ArgumentException("Unsupported value type for condition");
            }
        }
    }
}
