using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text;
using System.Threading.Tasks;

namespace FIS_Client.Services
{
    public class CpStaticDataService
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private readonly string _endpoint;

        public CpStaticDataService(HttpClient httpClient, string baseUrl, string endpoint)
        {
            _httpClient = httpClient;
            _baseUrl = baseUrl;
            _endpoint = endpoint;
        }

        public async Task<string> GetCounterpartyStaticDataAsync(string token, string counterpartyName)
        {
            var url = $"{_baseUrl}{_endpoint}{counterpartyName}";
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }

        public async Task<string> GetFilteredCounterpartyDataAsync(string token, string counterpartyName, string condition)
        {
            string jsonResponse = await GetCounterpartyStaticDataAsync(token, counterpartyName);
            JsonDocument document = JsonDocument.Parse(jsonResponse);
            var root = document.RootElement;

            List<JsonElement> filteredElements = new List<JsonElement>();

            if (root.ValueKind == JsonValueKind.Object)
            {
                if (IsConditionMet(root, condition))
                {
                    filteredElements.Add(root);
                }
            }
            else if (root.ValueKind == JsonValueKind.Array)
            {
                foreach (var element in root.EnumerateArray())
                {
                    if (IsConditionMet(element, condition))
                    {
                        filteredElements.Add(element);
                    }
                }
            }

            using var stream = new MemoryStream();
            using (var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true }))
            {
                if (filteredElements.Count == 1 && filteredElements[0].ValueKind == JsonValueKind.Object)
                {
                    filteredElements[0].WriteTo(writer);
                }
                else
                {
                    writer.WriteStartArray();
                    foreach (var element in filteredElements)
                    {
                        element.WriteTo(writer);
                    }
                    writer.WriteEndArray();
                }
            }

            return Encoding.UTF8.GetString(stream.ToArray());
        }

        private bool IsConditionMet(JsonElement element, string condition)
        {
            string[] conditionParts;
            string key, operatorSymbol, value;

            if (condition.Contains("!="))
            {
                conditionParts = condition.Split(new[] { "!=" }, StringSplitOptions.None);
                if (conditionParts.Length != 2)
                {
                    throw new ArgumentException("Invalid condition format. Use 'key != value'.");
                }
                key = conditionParts[0].Trim();
                operatorSymbol = "!=";
                value = conditionParts[1].Trim();
            }
            else if (condition.Contains("="))
            {
                conditionParts = condition.Split(new[] { "=" }, StringSplitOptions.None);
                if (conditionParts.Length != 2)
                {
                    throw new ArgumentException("Invalid condition format. Use 'key = value'.");
                }
                key = conditionParts[0].Trim();
                operatorSymbol = "=";
                value = conditionParts[1].Trim();
            }
            else
            {
                throw new ArgumentException("Invalid key-value format. Use 'key operator value'");
            }

            return IsConditionMet(element, key, operatorSymbol, value);
        }

        private bool IsConditionMet(JsonElement element, string key, string operatorSymbol, string value)
        {
            if (element.ValueKind == JsonValueKind.Object)
            {
                foreach (var property in element.EnumerateObject())
                {
                    if (property.NameEquals(key))
                    {
                        if (property.Value.ValueKind == JsonValueKind.String)
                        {
                            return EvaluateCondition(property.Value.GetString(), operatorSymbol, value);
                        }
                        else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                        {
                            if (IsConditionMet(property.Value, key, operatorSymbol, value))
                            {
                                return true;
                            }
                        }
                    }
                    else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                    {
                        if (IsConditionMet(property.Value, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }
            else if (element.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in element.EnumerateArray())
                {
                    if (item.ValueKind == JsonValueKind.Object || item.ValueKind == JsonValueKind.Array)
                    {
                        if (IsConditionMet(item, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool EvaluateCondition(string actualValue, string operatorSymbol, string expectedValue)
        {
            return operatorSymbol switch
            {
                "=" => actualValue == expectedValue,
                "!=" => actualValue != expectedValue,
                _ => throw new ArgumentException("Invalid operator. Use '=' or '!='."),
            };
        }
    }
}
