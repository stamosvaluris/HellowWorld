using Clients.Sftp;
using Helpers;
using FileOperations;
using CsvHelper.Configuration;
using System.IO;

namespace CdsClient
{
    public static class Program
    {
        public static async Task Main(string[] args)
        {
            Configuration config = Configuration.Load();
            SftpClient client = new SftpClient();
            client.Connect(config.Host, config.Port, config.Username, config.Password);
            client.ChangeDirectory(config.Files);
            string tempPath = PathHelper.GetTempFolderPath();
            Console.WriteLine(tempPath);
            client.GetLastUploadedZipFile(PathHelper.GetTempFolderPath());
            List<string> extractedFiles = ZipHelper.ExtractLastImportedZipFile(tempPath);

            List<string> keepOnly = new List<string>
            {
                "Date", "ShortName", "Tier", "PrimaryCurve", "PrimaryCoupon", "Tenor", "ParSpread"
            };

            // Keep only specified columns
            var filteredColumns = FileOperations.CsvHelper.KeepOnlyColumns(extractedFiles[0], keepOnly);

            // Save filtered columns to a new CSV file
            string outputFilePath = Path.Combine(tempPath, "output_filtered.csv");
            FileOperations.CsvHelper.WriteCsv(outputFilePath, filteredColumns);

            // Apply filter criteria
            var criteria = new Dictionary<string, string>
            {
                { "Tier", "SNRFOR" },
                { "PrimaryCurve", "Y" },
                { "PrimaryCoupon", "Y" },
                { "Tenor", "5Y" }
            };
            var filteredRecords = FileOperations.CsvHelper.FilterCsv(outputFilePath, criteria);

            // Save final filtered CSV file
            string finalOutputPath = Path.Combine(tempPath, "output.csv");
            FileOperations.CsvHelper.WriteCsv(finalOutputPath, filteredRecords);

            // Example using streams
            string outputPathStream = Path.Combine(tempPath, "output_streamed.csv");
            using (var inputStream = new FileStream(extractedFiles[0], FileMode.Open, FileAccess.Read))
            using (var memoryStream = new MemoryStream())
            {
                var filteredColumnsStream = FileOperations.CsvHelper.KeepOnlyColumns(inputStream, keepOnly);
                FileOperations.CsvHelper.WriteCsv(memoryStream, filteredColumnsStream);

                memoryStream.Position = 0; // Reset position for reading

                var filteredRecordsStream = FileOperations.CsvHelper.FilterCsv(memoryStream, criteria);
                using (var outputStream = new FileStream(outputPathStream, FileMode.Create, FileAccess.Write))
                {
                    FileOperations.CsvHelper.WriteCsv(outputStream, filteredRecordsStream);
                }
            }

            client.Disconnect();
        }
    }
}
