using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using CdsClient.Sftp;
using Clients.Api;
using Helpers;
using FileOperations;

public static class Program
{
    private static async Task Main(string[] args)
    {
        try
        {
            Configuration config = Configuration.Load();
            SftpClient client = new SftpClient();
            client.Connect(config.Host, config.Port, config.Username, config.Password);
            client.ChangeDirectory(config.Files);

            string tempFolderPath = PathHelper.GetTempFolderPath();
            Console.WriteLine($"Temp folder path: {tempFolderPath}");
            client.GetLastUploadedZipFile(tempFolderPath);

            List<string> extractedFiles = ZipHelper.ExtractedLastImportedZipFile(tempFolderPath);
            if (extractedFiles.Count == 0)
            {
                Console.WriteLine("No files extracted.");
                return;
            }

            Console.WriteLine($"Extracted file: {extractedFiles[0]}");

            List<string> keepOnly = new List<string> { "Date", "ShortName", "Tier", "PrimaryCurve", "PrimaryCoupon", "Tenor", "ParSpread" };

            var filteredColumns = await FileOperations.CsvHelper.KeepOnlyColumnsAsync(extractedFiles[0], keepOnly);

            if (filteredColumns == null || !filteredColumns.Any())
            {
                Console.WriteLine("No columns found after filtering.");
                return;
            }

            Console.WriteLine("Filtered columns obtained.");

            using (var memoryStream = new MemoryStream())
            {
                await FileOperations.CsvHelper.WriteCsvAsync(memoryStream, filteredColumns);
                memoryStream.Position = 0;

                var criteria = new Dictionary<string, string>
                {
                    { "r", "SR" },
                    { "Purve", "Y" },
                    { "Proupon", "Y" },
                    { "Teor", "5Y" }
                };

                var filteredRecords = await FileOperations.CsvHelper.FilterCsvAsync(memoryStream, criteria);

                if (filteredRecords == null || !filteredRecords.Any())
                {
                    Console.WriteLine("No records found after filtering.");
                    return;
                }

                string outputFilePath = @"C:\Users";
                await FileOperations.CsvHelper.WriteCsvAsync(outputFilePath, filteredRecords);

                Console.WriteLine($"Output file written to: {outputFilePath}");
            }

            client.Disconnect();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
