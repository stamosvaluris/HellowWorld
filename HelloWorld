using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public class CsvHelper
    {
        public void FilterCsv(string inputFilePath, string outputFilePath, Dictionary<string, string> criteria)
        {
            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture);

            var records = csvReader.GetRecords<dynamic>().ToList();

            var filteredRecords = records.Where(record =>
            {
                foreach (var criterion in criteria)
                {
                    var value = ((IDictionary<string, object>)record)[criterion.Key]?.ToString();
                    if (value != criterion.Value)
                    {
                        return false;
                    }
                }
                return true;
            }).ToList();

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);
            csvWriter.WriteRecords(filteredRecords);
        }

        public List<dynamic> ReadCsv(string filePath)
        {
            using var reader = new StreamReader(filePath);
            using var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture);

            var records = csvReader.GetRecords<dynamic>().ToList();
            return records;
        }

        public void WriteCsv<T>(string filePath, List<T> records)
        {
            using var writer = new StreamWriter(filePath);
            using var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);

            csvWriter.WriteRecords(records);
        }
    }
}
