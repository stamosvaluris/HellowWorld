using System;
using System.IO;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

public class Encryption
{
    private readonly SecretClient secretClient;

    public Encryption(string keyVaultUrl)
    {
        secretClient = new SecretClient(new Uri(keyVaultUrl), new DefaultAzureCredential());
    }

    public async Task GenerateAndSaveKeyAndIVAsync(string keyName, string ivName)
    {
        using (Aes aes = Aes.Create())
        {
            aes.GenerateKey();
            aes.GenerateIV();

            // Convert to Base64
            string base64Key = Convert.ToBase64String(aes.Key);
            string base64IV = Convert.ToBase64String(aes.IV);

            // Store in Azure Key Vault
            await secretClient.SetSecretAsync(new KeyVaultSecret(keyName, base64Key));
            await secretClient.SetSecretAsync(new KeyVaultSecret(ivName, base64IV));

            Console.WriteLine("AES Key and IV have been generated and saved to Azure Key Vault.");
        }
    }

    public byte[] EncryptFile(string filePath, byte[] key, byte[] iv)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;
            byte[] encrypted;

            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    fs.CopyTo(cs);
                }
                encrypted = ms.ToArray();
            }

            return encrypted;
        }
    }
}

using System;
using System.IO;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

public class Decryption
{
    private readonly SecretClient secretClient;

    public Decryption(string keyVaultUrl)
    {
        secretClient = new SecretClient(new Uri(keyVaultUrl), new DefaultAzureCredential());
    }

    public async Task<byte[]> DecryptFileAsync(string encryptedFilePath, string keyName, string ivName)
    {
        // Retrieve key and IV from Azure Key Vault
        KeyVaultSecret keySecret = await secretClient.GetSecretAsync(keyName);
        KeyVaultSecret ivSecret = await secretClient.GetSecretAsync(ivName);

        byte[] key = Convert.FromBase64String(keySecret.Value);
        byte[] iv = Convert.FromBase64String(ivSecret.Value);

        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;
            byte[] decrypted;

            using (FileStream fs = new FileStream(encryptedFilePath, FileMode.Open, FileAccess.Read))
            using (MemoryStream ms = new MemoryStream())
            using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
            {
                fs.CopyTo(cs);
                cs.FlushFinalBlock();
                decrypted = ms.ToArray();
            }

            return decrypted;
        }
    }
}

using System;
using System.IO;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string filePath = "credentials.json";
        string encryptedFilePath = "encrypted_credentials.json";
        string decryptedFilePath = "decrypted_credentials.json";
        string keyVaultUrl = "https://your-key-vault-name.vault.azure.net/";
        string keyName = "aesKey";
        string ivName = "aesIV";

        var encryption = new Encryption(keyVaultUrl);
        var decryption = new Decryption(keyVaultUrl);

        // Generate and save key and IV in Azure Key Vault
        await encryption.GenerateAndSaveKeyAndIVAsync(keyName, ivName);

        // Load the key and IV from Azure Key Vault
        KeyVaultSecret keySecret = await encryption.secretClient.GetSecretAsync(keyName);
        KeyVaultSecret ivSecret = await encryption.secretClient.GetSecretAsync(ivName);
        byte[] key = Convert.FromBase64String(keySecret.Value);
        byte[] iv = Convert.FromBase64String(ivSecret.Value);

        // Encrypt the file
        byte[] encrypted = encryption.EncryptFile(filePath, key, iv);
        File.WriteAllBytes(encryptedFilePath, encrypted);

        // Decrypt the file
        byte[] decrypted = await decryption.DecryptFileAsync(encryptedFilePath, keyName, ivName);
        File.WriteAllBytes(decryptedFilePath, decrypted);
    }
}

