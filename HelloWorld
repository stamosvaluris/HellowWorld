using CdsClient;
using Clients.Sftp;
using Helpers;
using FileOperations;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

public static class Program
{
    private static async Task Main(string[] args)
    {
        Configuration config = Configuration.Load();
        SftpClient client = new SftpClient();
        client.Connect(config.Host, config.Port, config.Username, config.Password);
        client.ChangeDirectory(config.File);
        PathHelper.GetTempFolderPath();
        Console.WriteLine(PathHelper.GetTempFolderPath());
        client.GetLastUploadedFile(PathHelper.GetTempFolderPath());
        List<string> extractedFiles = ZipHelper.ExtractedLastImportedZipFile(PathHelper.GetTempFolderPath());
        List<string> keepOnly = new List<string> { "Date", "ShortName", "Tier", "PrimaryCurve", "PrimaryCoupon", "Tenor", "ParSpread" };
        var filteredColumns = await FileOperations.CsvHelper.KeepOnlyColumnsAsync(extractedFiles[0], keepOnly);

        using (var memoryStream = new MemoryStream())
        {
            try
            {
                await FileOperations.CsvHelper.WriteCsvAsync(memoryStream, filteredColumns);
                memoryStream.Position = 0; // Ensure the stream is at the beginning for reading

                var criteria = new Dictionary<string, string>
                {
            
                };

                memoryStream.Position = 0; // Reset position before reading for filtering
                var filteredRecords = await FileOperations.CsvHelper.FilterCsvAsync(memoryStream, criteria);

                memoryStream.Position = 0; // Reset position before writing the final output
                await FileOperations.CsvHelper.WriteCsvAsync(@"", filteredRecords);
            }
            finally
            {
                memoryStream.Dispose(); // Ensure the stream is disposed of properly
            }
        }

        Console.WriteLine($">>>>>>>>>>>>>>>>>>>>>>>>>> {extractedFiles[0]}");
        client.Disconnect();
    }
}
