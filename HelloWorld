using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.Configuration.Attributes;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static async Task<IEnumerable<ExpandoObject>> KeepOnlyColumnsAsync(Stream csvStream, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<ExpandoObject>().ToListAsync();

            var filteredRecords = records.Select(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                var filteredDict = new ExpandoObject() as IDictionary<string, object>;
                foreach (var kvp in recordDict.Where(kvp => columnsToKeep.Contains(kvp.Key)))
                {
                    filteredDict[kvp.Key] = kvp.Value;
                }
                return (ExpandoObject)filteredDict;
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<ExpandoObject>> FilterCsvAsync(Stream csvStream, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRecord}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<ExpandoObject>().ToListAsync();

            var filteredRecords = records.Where(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                return criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key].ToString() == c.Value);
            }).ToList();

            return filteredRecords;
        }

        public static async Task WriteCsvAsync(Stream outputStream, IEnumerable<ExpandoObject> records)
        {
            var config = new CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                LeaveOpen = true // Leave the stream open after writing
            };

            using var writer = new StreamWriter(outputStream);
            using var csvWriter = new CsvWriter(writer, config);
            await csvWriter.WriteRecordsAsync(records);
        }
    }
}
