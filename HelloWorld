public static class JsonHelper
{
    public static async Task<JsonDocument> MultiplyKeyByValueAsync(string inputFilePath, string key, double multiplier)
    {
        using var stream = new FileStream(inputFilePath, FileMode.Open, FileAccess.Read);
        return await MultiplyKeyByValueAsync(stream, key, multiplier);
    }

    public static async Task<JsonDocument> MultiplyKeyByValueAsync(Stream jsonStream, string key, double multiplier)
    {
        using var document = await JsonDocument.ParseAsync(jsonStream);
        return await MultiplyKeyByValueAsync(document, key, multiplier);
    }

    public static async Task<JsonDocument> MultiplyKeyByValueAsync(JsonDocument inputJson, string key, double multiplier)
    {
        using var stream = new MemoryStream();
        using (var writer = new Utf8JsonWriter(stream))
        {
            if (inputJson.RootElement.ValueKind == JsonValueKind.Object)
            {
                writer.WriteStartObject();
                foreach (var property in inputJson.RootElement.EnumerateObject())
                {
                    if (property.Name == key && property.Value.ValueKind == JsonValueKind.Number)
                    {
                        writer.WritePropertyName(property.Name);
                        writer.WriteNumberValue(property.Value.GetDouble() * multiplier);
                    }
                    else
                    {
                        property.WriteTo(writer);
                    }
                }
                writer.WriteEndObject();
            }
            else if (inputJson.RootElement.ValueKind == JsonValueKind.Array)
            {
                writer.WriteStartArray();
                foreach (var element in inputJson.RootElement.EnumerateArray())
                {
                    if (element.ValueKind == JsonValueKind.Object)
                    {
                        writer.WriteStartObject();
                        foreach (var property in element.EnumerateObject())
                        {
                            if (property.Name == key && property.Value.ValueKind == JsonValueKind.Number)
                            {
                                writer.WritePropertyName(property.Name);
                                writer.WriteNumberValue(property.Value.GetDouble() * multiplier);
                            }
                            else
                            {
                                property.WriteTo(writer);
                            }
                        }
                        writer.WriteEndObject();
                    }
                    else
                    {
                        element.WriteTo(writer);
                    }
                }
                writer.WriteEndArray();
            }

            await writer.FlushAsync();
        }
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}
