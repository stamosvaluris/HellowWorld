public static async Task<JsonDocument> KeepOnlyColumnsAsync(Stream jsonStream, List<string> columnsToKeep)
{
    using var doc = await JsonDocument.ParseAsync(jsonStream);
    using var ms = new MemoryStream();
    using var writer = new Utf8JsonWriter(ms);

    writer.WriteStartObject();
    foreach (var element in doc.RootElement.EnumerateObject())
    {
        if (columnsToKeep.Contains(element.Name))
        {
            element.WriteTo(writer);
        }
    }
    writer.WriteEndObject();
    await writer.FlushAsync();
    ms.Position = 0;

    return await JsonDocument.ParseAsync(ms);
}

public static async Task<JsonDocument> FilterJsonAsync(Stream jsonStream, Dictionary<string, string> criteria)
{
    using var doc = await JsonDocument.ParseAsync(jsonStream);
    using var ms = new MemoryStream();
    using var writer = new Utf8JsonWriter(ms);

    writer.WriteStartObject();
    foreach (var element in doc.RootElement.EnumerateObject())
    {
        bool recordMatches = criteria.All(c =>
            element.TryGetProperty(c.Key, out var prop) && prop.GetString() == c.Value);
        if (recordMatches)
        {
            element.WriteTo(writer);
        }
    }
    writer.WriteEndObject();
    await writer.FlushAsync();
    ms.Position = 0;

    return await JsonDocument.ParseAsync(ms);
}

public static async Task<JsonDocument> FilterColumnByValuesAsync(Stream jsonStream, string key, List<string> values)
{
    using var doc = await JsonDocument.ParseAsync(jsonStream);
    using var ms = new MemoryStream();
    using var writer = new Utf8JsonWriter(ms);

    writer.WriteStartObject();
    foreach (var element in doc.RootElement.EnumerateObject())
    {
        if (element.TryGetProperty(key, out var prop) && values.Contains(prop.GetString()))
        {
            element.WriteTo(writer);
        }
    }
    writer.WriteEndObject();
    await writer.FlushAsync();
    ms.Position = 0;

    return await JsonDocument.ParseAsync(ms);
}

public static async Task<JsonDocument> MultiplyKeyByValueAsync(Stream jsonStream, string key, double multiplier)
{
    using var doc = await JsonDocument.ParseAsync(jsonStream);
    using var ms = new MemoryStream();
    using var writer = new Utf8JsonWriter(ms);

    writer.WriteStartObject();
    foreach (var element in doc.RootElement.EnumerateObject())
    {
        if (element.TryGetProperty(key, out var prop) && prop.ValueKind == JsonValueKind.Number)
        {
            writer.WritePropertyName(element.Name);
            writer.WriteNumberValue(prop.GetDouble() * multiplier);
        }
        else
        {
            element.WriteTo(writer);
        }
    }
    writer.WriteEndObject();
    await writer.FlushAsync();
    ms.Position = 0;

    return await JsonDocument.ParseAsync(ms);
}
