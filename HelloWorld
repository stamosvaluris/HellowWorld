using System.Globalization;
using CsvHelper;
using CsvHelper.Configuration;
using System.Text.Json;
using System.Threading.Tasks;

namespace FileOperations
{
    public static class Converters
    {
        public static async Task<JsonDocument> CsvToJsonAsync(Stream csvStream)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                MissingFieldFound = null
            };

            using var reader = new StreamReader(csvStream);
            using var csv = new CsvReader(reader, config);
            var records = new List<dynamic>();
            await foreach (var record in csv.GetRecordsAsync<ExpandoObject>())
            {
                records.Add(record);
            }

            using var stream = new MemoryStream();
            await JsonSerializer.SerializeAsync(stream, records);
            stream.Position = 0;
            return await JsonDocument.ParseAsync(stream);
        }

        public static async Task<JsonDocument> CsvToJsonAsync(string csvFilePath)
        {
            using var fileStream = new FileStream(csvFilePath, FileMode.Open, FileAccess.Read);
            return await CsvToJsonAsync(fileStream);
        }

        public static async Task CsvToJsonAsync(JsonDocument jsonDocument, Stream csvStream)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true
            };

            var records = JsonSerializer.Deserialize<List<ExpandoObject>>(jsonDocument.RootElement.GetRawText());
            using var writer = new StreamWriter(csvStream);
            using var csv = new CsvWriter(writer, config);
            await csv.WriteRecordsAsync(records);
        }

        public static async Task CsvToJsonAsync(JsonDocument jsonDocument, string csvFilePath)
        {
            using var fileStream = new FileStream(csvFilePath, FileMode.Create, FileAccess.Write);
            await CsvToJsonAsync(jsonDocument, fileStream);
        }
    }
}
