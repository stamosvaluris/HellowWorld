using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using FileOperations; // Assuming JsonHelper is in FileOperations namespace

namespace FIS.Client.Services
{
    public class CpStaticDataService
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;
        private readonly string _endpoint;
        private readonly JsonHelper _jsonHelper;

        public CpStaticDataService(HttpClient httpClient, string baseUrl, string endpoint)
        {
            _httpClient = httpClient;
            _baseUrl = baseUrl;
            _endpoint = endpoint;
            _jsonHelper = new JsonHelper(); // Initialize JsonHelper
        }

        public async Task<JsonDocument> GetCounterpartyStaticDataAsync(string token, string counterpartyName)
        {
            var url = $"{_baseUrl}{_endpoint}{counterpartyName}";
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonDocument.Parse(jsonString);
        }

        public async Task<JsonDocument> GetConditionalCounterpartyStaticDataAsync(string token, string counterpartyName, string condition)
        {
            var jsonDocument = await GetCounterpartyStaticDataAsync(token, counterpartyName);
            var rootElement = jsonDocument.RootElement;

            if (string.IsNullOrEmpty(condition))
            {
                return jsonDocument;
            }

            var conditionParts = _jsonHelper.ParseCondition(condition);

            if (conditionParts == null || conditionParts.Length != 3)
            {
                throw new ArgumentException("Invalid key-value format. Use 'key operator value'");
            }

            var key = conditionParts[0];
            var operatorSymbol = conditionParts[1];
            var value = conditionParts[2];

            if (_jsonHelper.CheckConditionInJsonElement(rootElement, key, operatorSymbol, value))
            {
                return jsonDocument;
            }

            return null;
        }
    }
}
