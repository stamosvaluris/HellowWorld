using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static async Task<IEnumerable<Dictionary<string, object>>> FilterCsvAsync(string inputFilePath, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = new List<Dictionary<string, object>>();

            foreach (var record in records)
            {
                var recordDict = (IDictionary<string, object>)record;
                bool recordMatches = criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);

                if (recordMatches)
                {
                    filteredRecords.Add(new Dictionary<string, object>(recordDict));
                }
            }

            return filteredRecords;
        }

        public static async Task<IEnumerable<Dictionary<string, object>>> FilterCsvAsync(Stream csvStream, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null,
                LeaveOpen = true
            };

            using var reader = new StreamReader(csvStream, leaveOpen: true);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = new List<Dictionary<string, object>>();

            foreach (var record in records)
            {
                var recordDict = (IDictionary<string, object>)record;
                bool recordMatches = criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);

                if (recordMatches)
                {
                    filteredRecords.Add(new Dictionary<string, object>(recordDict));
                }
            }

            return filteredRecords;
        }

        public static async Task WriteCsvAsync(string outputFilePath, IEnumerable<Dictionary<string, object>> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true
            };

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, config);
            await WriteRecordsAsync(csvWriter, records);
        }

        public static async Task WriteCsvAsync(Stream outputStream, IEnumerable<Dictionary<string, object>> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                LeaveOpen = true
            };

            using var writer = new StreamWriter(outputStream, leaveOpen: true);
            using var csvWriter = new CsvWriter(writer, config);
            await WriteRecordsAsync(csvWriter, records);
        }

        private static async Task WriteRecordsAsync(CsvWriter csvWriter, IEnumerable<Dictionary<string, object>> records)
        {
            if (!records.Any()) return;

            var headers = records.First().Keys;
            foreach (var header in headers)
            {
                csvWriter.WriteField(header);
            }
            await csvWriter.NextRecordAsync();

            foreach (var record in records)
            {
                foreach (var header in headers)
                {
                    csvWriter.WriteField(record[header]);
                }
                await csvWriter.NextRecordAsync();
            }
        }

        public static async Task<IEnumerable<Dictionary<string, object>>> KeepOnlyColumnsAsync(string inputFilePath, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = records.Select(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                return recordDict
                    .Where(kvp => columnsToKeep.Contains(kvp.Key))
                    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<Dictionary<string, object>>> KeepOnlyColumnsAsync(Stream csvStream, List<string> columnsToKeep)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null,
                LeaveOpen = true
            };

            using var reader = new StreamReader(csvStream, leaveOpen: true);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = records.Select(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                return recordDict
                    .Where(kvp => columnsToKeep.Contains(kvp.Key))
                    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<Dictionary<string, object>>> RemoveColumnsAsync(string inputFilePath, List<string> columnsToRemove)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = records.Select(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                return recordDict
                    .Where(kvp => !columnsToRemove.Contains(kvp.Key))
                    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }).ToList();

            return filteredRecords;
        }

        public static async Task<IEnumerable<Dictionary<string, object>>> RemoveColumnsAsync(Stream csvStream, List<string> columnsToRemove)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null,
                LeaveOpen = true
            };

            using var reader = new StreamReader(csvStream, leaveOpen: true);
            using var csvReader = new CsvReader(reader, config);
            var records = await csvReader.GetRecordsAsync<dynamic>().ToListAsync();

            var filteredRecords = records.Select(record =>
            {
                var recordDict = (IDictionary<string, object>)record;
                return recordDict
                    .Where(kvp => !columnsToRemove.Contains(kvp.Key))
                    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            }).ToList();

            return filteredRecords;
        }
    }
}
