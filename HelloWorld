using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FileOperations
{
    public class JsonHelper
    {
        public dynamic ReadJsonAsDynamic(string filePath)
        {
            var jsonString = File.ReadAllText(filePath);
            return JsonSerializer.Deserialize<dynamic>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        public void WriteJson<T>(string filePath, T obj)
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var jsonString = JsonSerializer.Serialize(obj, options);
            File.WriteAllText(filePath, jsonString);
        }

        public void FilterProperties(string inputFilePath, string outputFilePath, List<string> propertiesToKeep)
        {
            var jsonObject = ReadJsonAsDynamic(inputFilePath);
            var filteredObject = FilterPropertiesRecursive(jsonObject, propertiesToKeep);
            WriteJson(outputFilePath, filteredObject);
        }

        private dynamic FilterPropertiesRecursive(dynamic jsonObject, List<string> propertiesToKeep)
        {
            if (jsonObject is JsonElement element)
            {
                if (element.ValueKind == JsonValueKind.Object)
                {
                    var result = new Dictionary<string, object>();
                    foreach (var property in element.EnumerateObject())
                    {
                        if (propertiesToKeep.Contains(property.Name))
                        {
                            result[property.Name] = FilterPropertiesRecursive(property.Value, propertiesToKeep);
                        }
                    }
                    return result;
                }
                else if (element.ValueKind == JsonValueKind.Array)
                {
                    var result = new List<object>();
                    foreach (var item in element.EnumerateArray())
                    {
                        result.Add(FilterPropertiesRecursive(item, propertiesToKeep));
                    }
                    return result;
                }
                else
                {
                    return element.ToString();
                }
            }
            return jsonObject;
        }

        public static bool CheckConditionInJsonElement(JsonElement element, string key, string operatorSymbol, string value)
        {
            if (element.ValueKind == JsonValueKind.Object)
            {
                foreach (var property in element.EnumerateObject())
                {
                    if (property.NameEquals(key) && IsConditionMet(property.Value, operatorSymbol, value))
                    {
                        return true;
                    }

                    if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                    {
                        if (CheckConditionInJsonElement(property.Value, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }
            else if (element.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in element.EnumerateArray())
                {
                    if (item.ValueKind == JsonValueKind.Object || item.ValueKind == JsonValueKind.Array)
                    {
                        if (CheckConditionInJsonElement(item, key, operatorSymbol, value))
                        {
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        private static bool IsConditionMet(JsonElement element, string operatorSymbol, string value)
        {
            switch (element.ValueKind)
            {
                case JsonValueKind.String:
                    var elementValue = element.GetString();
                    return operatorSymbol switch
                    {
                        "==" => elementValue == value,
                        "!=" => elementValue != value,
                        _ => throw new ArgumentException($"Unsupported operator {operatorSymbol}")
                    };
                case JsonValueKind.Number:
                    if (double.TryParse(value, out var doubleValue))
                    {
                        var elementNumber = element.GetDouble();
                        return operatorSymbol switch
                        {
                            "==" => elementNumber == doubleValue,
                            "!=" => elementNumber != doubleValue,
                            "<" => elementNumber < doubleValue,
                            ">" => elementNumber > doubleValue,
                            "<=" => elementNumber <= doubleValue,
                            ">=" => elementNumber >= doubleValue,
                            _ => throw new ArgumentException($"Unsupported operator {operatorSymbol}")
                        };
                    }
                    throw new ArgumentException($"{value} is not a valid number");
                case JsonValueKind.True:
                case JsonValueKind.False:
                    if (bool.TryParse(value, out var boolValue))
                    {
                        var elementBool = element.GetBoolean();
                        return operatorSymbol switch
                        {
                            "==" => elementBool == boolValue,
                            "!=" => elementBool != boolValue,
                            _ => throw new ArgumentException($"Unsupported operator {operatorSymbol}")
                        };
                    }
                    throw new ArgumentException($"{value} is not a valid boolean");
                default:
                    throw new ArgumentException($"Unsupported value type for condition");
            }
        }

        public string PrintJson(JsonDocument jsonDocument)
        {
            using var stream = new MemoryStream();
            var writerOptions = new JsonWriterOptions { Indented = true };
            using (var writer = new Utf8JsonWriter(stream, writerOptions))
            {
                jsonDocument.WriteTo(writer);
            }
            return Encoding.UTF8.GetString(stream.ToArray());
        }

        public async Task<List<string>> ExtractValuesByKeyAsync(JsonDocument jsonDocument, string key)
        {
            var values = new List<string>();
            await ExtractValuesByKeyRecursiveAsync(jsonDocument.RootElement, key, values);
            return values;
        }

        private Task ExtractValuesByKeyRecursiveAsync(JsonElement element, string key, List<string> values)
        {
            return Task.Run(() =>
            {
                if (element.ValueKind == JsonValueKind.Object)
                {
                    foreach (var property in element.EnumerateObject())
                    {
                        if (property.NameEquals(key))
                        {
                            values.Add(property.Value.ToString());
                        }
                        else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                        {
                            ExtractValuesByKeyRecursiveAsync(property.Value, key, values).Wait();
                        }
                    }
                }
                else if (element.ValueKind == JsonValueKind.Array)
                {
                    foreach (var item in element.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Object || item.ValueKind == JsonValueKind.Array)
                        {
                            ExtractValuesByKeyRecursiveAsync(item, key, values).Wait();
                        }
                    }
                }
            });
        }

        public string[] ParseCondition(string condition)
        {
            int operatorPos = condition.IndexOf("==");
            string operatorSymbol = "==";
            if (operatorPos == -1)
            {
                operatorPos = condition.IndexOf("!=");
                operatorSymbol = "!=";
            }
            if (operatorPos == -1)
            {
                operatorPos = condition.IndexOf("<=");
                operatorSymbol = "<=";
            }
            if (operatorPos == -1)
            {
                operatorPos = condition.IndexOf(">=");
                operatorSymbol = ">=";
            }
            if (operatorPos == -1)
            {
                operatorPos = condition.IndexOf("<");
                operatorSymbol = "<";
            }
            if (operatorPos == -1)
            {
                operatorPos = condition.IndexOf(">");
                operatorSymbol = ">";
            }
            if (operatorPos == -1)
            {
                return null;
            }

            var key = condition.Substring(0, operatorPos).Trim();
            var value = condition.Substring(operatorPos + operatorSymbol.Length).Trim();
            return new string[] { key, operatorSymbol, value };
        }
    }
}
