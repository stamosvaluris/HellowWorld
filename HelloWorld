public static async Task<JsonDocument> KeepOnlyKeysAsync(JsonDocument inputJson, List<string> keysToKeep)
{
    using (var stream = new MemoryStream())
    using (var writer = new Utf8JsonWriter(stream))
    {
        if (inputJson.RootElement.ValueKind == JsonValueKind.Object)
        {
            writer.WriteStartObject();
            foreach (var property in inputJson.RootElement.EnumerateObject())
            {
                if (keysToKeep.Contains(property.Name))
                {
                    property.WriteTo(writer);
                }
            }
            writer.WriteEndObject();
        }
        else if (inputJson.RootElement.ValueKind == JsonValueKind.Array)
        {
            writer.WriteStartArray();
            foreach (var element in inputJson.RootElement.EnumerateArray())
            {
                writer.WriteStartObject();
                foreach (var property in element.EnumerateObject())
                {
                    if (keysToKeep.Contains(property.Name))
                    {
                        property.WriteTo(writer);
                    }
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }
        await writer.FlushAsync();
        stream.Position = 0;
        return await JsonDocument.ParseAsync(stream);
    }
}

public static async Task WriteJsonAsync(string folderPath, string fileName, dynamic obj)
{
    var options = new JsonSerializerOptions { WriteIndented = true };
    var jsonString = JsonSerializer.Serialize(obj, options);
    await FileOperationsHelper.WriteFileAsync(folderPath, fileName, jsonString, "json");
}
