using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public class CsvHelper
    {
        public void FilterCsv(string inputFilePath, string outputFilePath, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at field: {context.Field}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);

            var records = csvReader.GetRecords<dynamic>().ToList();

            Console.WriteLine($"Total records read: {records.Count}");

            var filteredRecords = new List<dynamic>();

            foreach (var record in records)
            {
                var recordDict = (IDictionary<string, object>)record;
                bool recordMatches = true;

                Console.WriteLine("Checking record:");
                foreach (var kvp in recordDict)
                {
                    Console.WriteLine($"{kvp.Key} = {kvp.Value}");
                }

                foreach (var criterion in criteria)
                {
                    var key = criterion.Key.Trim();
                    var value = criterion.Value.Trim();

                    if (recordDict.ContainsKey(key))
                    {
                        var recordValue = recordDict[key]?.ToString().Trim();
                        Console.WriteLine($"Checking {key}: {recordValue} == {value}");
                        if (recordValue != value)
                        {
                            recordMatches = false;
                            break;
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Key {key} not found in record.");
                        recordMatches = false;
                        break;
                    }
                }

                if (recordMatches)
                {
                    Console.WriteLine("Record matches criteria.");
                    filteredRecords.Add(record);
                }
                else
                {
                    Console.WriteLine("Record does not match criteria.");
                }
            }

            Console.WriteLine($"Total records after filtering: {filteredRecords.Count}");

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);

            if (filteredRecords.Any())
            {
                csvWriter.WriteRecords(filteredRecords);
                Console.WriteLine("Filtered records written to output file.");
            }
            else
            {
                Console.WriteLine("No records matched the criteria.");
            }
        }

        public List<dynamic> ReadCsv(string filePath)
        {
            using var reader = new StreamReader(filePath);
            using var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture);

            var records = csvReader.GetRecords<dynamic>().ToList();
            return records;
        }

        public void WriteCsv<T>(string filePath, List<T> records)
        {
            using var writer = new StreamWriter(filePath);
            using var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);

            csvWriter.WriteRecords(records);
        }
    }
}
