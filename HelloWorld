using System;
using System.Net.Http;
using System.Threading.Tasks;
using FIS_Client.Config;
using FIS_Client.Services;

class Program
{
    static async Task Main(string[] args)
    {
        var config = ConfigReader.LoadConfig();
        if (config == null)
        {
            Console.WriteLine("Failed to read configuration");
            return;
        }

        using var httpClient = new HttpClient();
        var fisClient = new FisClient(httpClient, config);
        string env = "uat";
        string token = await fisClient.GetFisAccessTokenAsync(env);

        var cpStaticDataService = new CpStaticDataService(httpClient, config.Uat.Services["CpStaticData"].BaseUrl, config.Uat.Services["CpStaticData"].Endpoint);
        string counterpartyName = "exampleCounterparty";

        // Fetch the data without filtering
        string staticData = await cpStaticDataService.GetFilteredCounterpartyDataAsync(token, counterpartyName);
        Console.WriteLine($"Static Data for {counterpartyName}:\n{staticData}");

        // Fetch the data with filtering
        string condition = "lei != NONE";
        string filteredData = await cpStaticDataService.GetFilteredCounterpartyDataAsync(token, counterpartyName, condition);
        Console.WriteLine($"Filtered Static Data for {counterpartyName} with condition '{condition}':\n{filteredData}");
    }
}
