using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FileOperations
{
    public static class JsonHelper
    {
        public static dynamic ReadJsonAsDynamic(string filePath)
        {
            var jsonString = File.ReadAllText(filePath);
            return JsonSerializer.Deserialize<dynamic>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        public static void WriteJson<T>(string filePath, T obj)
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var jsonString = JsonSerializer.Serialize(obj, options);
            File.WriteAllText(filePath, jsonString);
        }

        public static void FilterProperties(string inputFilePath, string outputFilePath, List<string> propertiesToKeep)
        {
            dynamic jsonObject = ReadJsonAsDynamic(inputFilePath);
            var filteredObject = FilterPropertiesRecursive(jsonObject, propertiesToKeep);
            WriteJson(outputFilePath, filteredObject);
        }

        private static dynamic FilterPropertiesRecursive(dynamic jsonObject, List<string> propertiesToKeep)
        {
            if (jsonObject is JsonElement element)
            {
                if (element.ValueKind == JsonValueKind.Object)
                {
                    var result = new Dictionary<string, object>();
                    foreach (var property in element.EnumerateObject())
                    {
                        if (propertiesToKeep.Contains(property.Name))
                        {
                            result[property.Name] = FilterPropertiesRecursive(property.Value, propertiesToKeep);
                        }
                    }
                    return result;
                }
                else if (element.ValueKind == JsonValueKind.Array)
                {
                    var result = new List<object>();
                    foreach (var item in element.EnumerateArray())
                    {
                        result.Add(FilterPropertiesRecursive(item, propertiesToKeep));
                    }
                    return result;
                }
                else
                {
                    return element.ToString();
                }
            }
            return jsonObject;
        }

        public static async Task<List<string>> ExtractValuesByKeyAsync(JsonDocument jsonDocument, string key)
        {
            var values = new List<string>();
            await ExtractValuesByKeyRecursiveAsync(jsonDocument.RootElement, key, values);
            return values;
        }

        private static Task ExtractValuesByKeyRecursiveAsync(JsonElement element, string key, List<string> values)
        {
            return Task.Run(() =>
            {
                if (element.ValueKind == JsonValueKind.Object)
                {
                    foreach (var property in element.EnumerateObject())
                    {
                        if (property.NameEquals(key))
                        {
                            values.Add(property.Value.ToString());
                        }
                        else if (property.Value.ValueKind == JsonValueKind.Object || property.Value.ValueKind == JsonValueKind.Array)
                        {
                            ExtractValuesByKeyRecursiveAsync(property.Value, key, values).Wait();
                        }
                    }
                }
                else if (element.ValueKind == JsonValueKind.Array)
                {
                    foreach (var item in element.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Object || item.ValueKind == JsonValueKind.Array)
                        {
                            ExtractValuesByKeyRecursiveAsync(item, key, values).Wait();
                        }
                    }
                }
            });
        }

        public static string PrintJson(JsonDocument jsonDocument)
        {
            using var stream = new MemoryStream();
            var writerOptions = new JsonWriterOptions { Indented = true };
            using (var writer = new Utf8JsonWriter(stream, writerOptions))
            {
                jsonDocument.WriteTo(writer);
            }
            return Encoding.UTF8.GetString(stream.ToArray());
        }

        public static async Task<string> ExtractValuesByKeyAndReturnJsonAsync(JsonDocument jsonDocument, string key)
        {
            var values = await ExtractValuesByKeyAsync(jsonDocument, key);
            var jsonValues = new Dictionary<string, List<string>> { { key, values } };
            return JsonSerializer.Serialize(jsonValues, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
