using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace FileOperations
{
    public class JsonHelper
    {
        public dynamic ReadJsonAsDynamic(string filePath)
        {
            var jsonString = File.ReadAllText(filePath);
            return JsonSerializer.Deserialize<dynamic>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        public void WriteJson<T>(string filePath, T obj)
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            var jsonString = JsonSerializer.Serialize(obj, options);
            File.WriteAllText(filePath, jsonString);
        }

        public void FilterProperties(string inputFilePath, string outputFilePath, List<string> propertiesToKeep)
        {
            dynamic jsonObject = ReadJsonAsDynamic(inputFilePath);
            var filteredObject = FilterPropertiesRecursive(jsonObject, propertiesToKeep);
            WriteJson(outputFilePath, filteredObject);
        }

        private dynamic FilterPropertiesRecursive(dynamic jsonObject, List<string> propertiesToKeep)
        {
            if (jsonObject is JsonElement element)
            {
                if (element.ValueKind == JsonValueKind.Object)
                {
                    var result = new Dictionary<string, object>();
                    foreach (var property in element.EnumerateObject())
                    {
                        if (propertiesToKeep.Contains(property.Name))
                        {
                            result[property.Name] = FilterPropertiesRecursive(property.Value, propertiesToKeep);
                        }
                    }
                    return result;
                }
                else if (element.ValueKind == JsonValueKind.Array)
                {
                    var result = new List<object>();
                    foreach (var item in element.EnumerateArray())
                    {
                        result.Add(FilterPropertiesRecursive(item, propertiesToKeep));
                    }
                    return result;
                }
                else
                {
                    return element.ToString();
                }
            }
            return jsonObject;
        }
    }
}
