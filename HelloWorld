using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;

namespace FileOperations
{
    public static class CsvHelper
    {
        public static async Task FilterCsvAsync(string inputFilePath, string outputFilePath, Dictionary<string, string> criteria)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true,
                BadDataFound = context => Console.WriteLine($"Bad data found at row {context.RawRow}"),
                MissingFieldFound = null
            };

            using var reader = new StreamReader(inputFilePath);
            using var csvReader = new CsvReader(reader, config);
            var records = csvReader.GetRecords<dynamic>().ToList();

            var filteredRecords = new List<dynamic>();
            foreach (var record in records)
            {
                var recordDict = record as IDictionary<string, object>;
                if (recordDict == null) continue;

                bool recordMatches = criteria.All(c => recordDict.ContainsKey(c.Key) && recordDict[c.Key]?.ToString() == c.Value);

                if (recordMatches)
                {
                    filteredRecords.Add(record);
                }
            }

            using var writer = new StreamWriter(outputFilePath);
            using var csvWriter = new CsvWriter(writer, config);
            await csvWriter.WriteRecordsAsync(filteredRecords);
        }

        public static async Task WriteCsvAsync(string folderPath, string fileName, IEnumerable<dynamic> records)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                IgnoreBlankLines = true
            };

            using var writer = new StringWriter();
            using var csvWriter = new CsvWriter(writer, config);
            await csvWriter.WriteRecordsAsync(records);

            await FileOperationsHelper.WriteFileAsync(folderPath, fileName, writer.ToString(), "csv");
        }
    }
}
